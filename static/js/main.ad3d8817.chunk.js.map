{"version":3,"sources":["index.js"],"names":["QuestionText","props","className","questionText","YesOrNoButton","onClick","answerText","ChoiceField","useState","selectedValue","setSelectedValue","options","length","choiceOptions","map","option","index","value","label","console","log","undefined","isSearchable","onChange","inputValue","handleChange","OddsView","odds","source","href","class","target","rel","AllQuestionsPlayed","allQuestionCount","RarePercentageList","data","id","document","getElementById","classList","toggle","style","fontSize","rarity","question","choice","QuestionField","questionType","onSubmit","this","questionOptions","getAnswerField","React","Component","Game","shouldContinueInLevel","localStorage","getItem","alreadyPlayedBaseQuestionsFromLocalStorage","JSON","parse","getData","basequestions","state","gameView","rarityHistory","nextQuestionIndex","randomNumberExcluding","questionData","currentQuestion","currentBaseQuestion","questionCount","alreadyPlayedBasequestions","tempAlreadyPlayedQuestions","questionHistory","currentQuestionLevel","yesOdds","alert","showOdds","yes","newYesQuestions","questions","goQuestionLevelDeeper","noOdds","no","newNoQuestions","setNextQuestion","newQuestionIndex","setState","concat","levelFromBehind","currentLevelData","isAtBaseLevel","alreadyPlayedQuestions","newAlreadyPlayedBasequestions","setItem","stringify","newRandomQuestionIndex","newQuestionHistory","push","lastBaseQuestionIndex","lastQuestions","pop","lastQuestions2","lastQuestionIndex","lastQuestionHistory","rarityList","sort","a","b","gameViewComponent","getQuestionType","handleSubmit","playAgain","allQuestionsCount","restartGame","height","require","min","max","excludedNumbers","number","Math","floor","random","includes","ReactDOM","render"],"mappings":"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","file":"static/js/main.ad3d8817.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Select from 'react-select'\n\n// eslint-disable-next-line\nfunction QuestionText(props) {\n    return (\n        <div className=\"questionText-box\">\n            <h3 className=\"question\">\n                {props.questionText}\n            </h3>\n        </div>\n    );\n}\n\nfunction YesOrNoButton(props) {\n    return (\n        <div className=\"buttonBox\">\n            <button className=\"answerButton\"\n            onClick={props.onClick}>\n                {props.answerText}\n            </button>\n        </div>\n    );\n}\n\nfunction ChoiceField(props) {\n    const [selectedValue, setSelectedValue] = useState(\"unselected\");\n\n    function handleChange(inputValue) {\n        setSelectedValue(inputValue.value);\n        //selectedValue = inputValue.value;\n    }\n\n    if (props.options.length <= 0) {\n        //Just skip this question:\n        props.onClick(null);\n        return (\n            <div>\n            </div>\n        );\n    } else {\n        var choiceOptions = props.options.map(function(option, index) {\n            return {value: index, label: option.option};\n        });\n        console.log(selectedValue);\n        console.log(selectedValue===\"unselected\" ? null : undefined);\n        return (\n            <div className=\"select-row\">\n                <Select \n                options={choiceOptions}\n                isSearchable={true} \n                className=\"choice-block-field choice-field\" \n                value={selectedValue===\"unselected\" ? null : undefined}\n                onChange={(inputValue) => handleChange(inputValue)}/>\n                <button onClick={() => {\n                    props.onClick(selectedValue);\n                    setSelectedValue(\"unselected\");\n                }} className=\"choice-block-field choice-submit-button\">Submit</button>\n            </div>\n        );\n    }\n}\n\nfunction OddsView(props) {\n    return (\n        <div>\n            <h1>Congratulations! You are {props.odds}% rare!</h1>\n            {props.source != null ?\n            <a href={props.source} class=\"source-link\" target=\"_blank\" rel=\"noopener noreferrer\">&#9432; Source</a>\n            : null\n            }\n            <p>Be sure to tell all your friends how rare you are!</p>\n            <button onClick={props.onClick} className=\"generic-button\">Play on</button>\n        </div>\n    );\n}\n\nfunction AllQuestionsPlayed(props) {\n    return (\n        <div>\n            <h1>Respect!</h1>\n            <p>You just played through all questions, you crazy nerd! \n                That means you played through {props.allQuestionCount} questions!\n                We hate to say it, but maybe just get a hobby.\n                <br /> If you insist, you can restart the madness with the button below:\n            </p>\n            <button onClick={props.onClick} className=\"generic-button\" >Restart game</button>\n        </div>\n    );\n}\n\nfunction toggleDropdown() {\n    var triangle = document.getElementById(\"triangle\");\n    triangle.classList.toggle(\"upsidedown-transition\");\n    var tableContainer = document.getElementById(\"table-container\");\n    tableContainer.classList.toggle(\"height-transition\");\n    // if (element.classList.contains(\"animate-upsidedown\")) {\n    //     element.classList.toggle(\"animate-upsideup\");\n    // } else {\n    //     element.classList.toggle(\"animate-upsideup\");\n    // }\n}\n\nfunction RarePercentageList(props) {\n    console.log(props.data.length === 0 ? [{\"rarity\": 0, \"question\": \"\", \"choice\": \"You ain't rare yet!\"}] : props.data);\n\n    return (\n        <div className=\"table-container\" id=\"table-container\" onClick={ () => toggleDropdown() }>\n            <div className=\"dropdown-button\" id=\"dropdown-button\">\n                <div className=\"triangle_down\" id=\"triangle\"></div>\n            </div>\n            <table className=\"rarityTable\">\n                <thead>\n                    <tr>\n                        <th>Rarity</th>\n                        <th>Question</th>\n                    </tr>\n                </thead>\n\n                <tbody>\n                { props.data.length === 0 ? \n                <tr>\n                    <td className=\"rarity-cell\">0%</td>\n                    <td className=\"first-item\">\n                        <br />\n                        <span style={{fontSize: \"0.9rem\"}}>\n                            &emsp; &#8594; You ain't rare yet!\n                        </span>\n                    </td>\n                </tr> \n                : \n                props.data.map((data, index) => {\n                    const {rarity, question, choice} = data;\n                    return (\n                    <tr key={index}>\n                        <td className=\"rarity-cell\">{rarity}<span style={{fontSize:\"2rem\"}}>%</span></td>\n                        <td className={(index === 0 ? 'first-item' : '')}>\n                            {question}\n                            <br/>\n                            <span style={{fontSize: \"0.9rem\"}}>\n                                &emsp; &#8594; {choice} \n                            </span>\n                            </td>\n                    </tr>)\n                })}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nclass QuestionField extends React.Component {\n\n    getAnswerField(questionType) {\n        console.log(questionType);\n        switch(questionType) {\n            case \"final\":\n            case \"yesOrNo\":\n                return (\n                    <div className=\"buttonWrapper\">\n                        <YesOrNoButton answerText=\"Yes\" onClick={() => this.props.onSubmit(true)}/>\n                        <YesOrNoButton answerText=\"No\" onClick={() => this.props.onSubmit(false)}/>\n                    </div>\n                );\n            case \"choice\":\n                    return (\n                    <ChoiceField options={this.props.questionOptions} onClick={this.props.onSubmit} />\n                    );\n            default:\n                return (<p>Something went wrong!</p>)\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>I Am Rare</h1>\n                <div className=\"question-row\">\n                    <QuestionText questionText={this.props.questionText}/>\n                </div>\n                <div className=\"answer-row\">\n                    {this.getAnswerField(this.props.questionType)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        console.log(localStorage.getItem('alreadyPlayedBaseQuestions'));\n        let alreadyPlayedBaseQuestionsFromLocalStorage = localStorage.getItem('alreadyPlayedBaseQuestions') === null || localStorage.getItem('alreadyPlayedBaseQuestions') === \"undefined\" ? [] : JSON.parse(localStorage.getItem('alreadyPlayedBaseQuestions'));\n        console.log(alreadyPlayedBaseQuestionsFromLocalStorage);\n        if (alreadyPlayedBaseQuestionsFromLocalStorage.length === getData().basequestions.length) {\n            //If user played through all base questions, show him some respect!\n            this.state = {\n                gameView: \"all-questions-played\",\n                rarityHistory: localStorage.getItem('rarityHistory') === null || localStorage.getItem('rarityHistory') === \"undefined\" ? [] : JSON.parse(localStorage.getItem('rarityHistory')),\n            }\n        } else {\n            //Otherwise continue as normal\n            console.log(alreadyPlayedBaseQuestionsFromLocalStorage);\n            var nextQuestionIndex = randomNumberExcluding(0, getData().basequestions.length, alreadyPlayedBaseQuestionsFromLocalStorage);\n            console.log(localStorage.getItem('alreadyPlayedBaseQuestions'));\n            this.state = {\n                questionData: getData().basequestions,\n                //Get random question Index, excluding nothing at first\n                currentQuestion: nextQuestionIndex,\n                currentBaseQuestion: nextQuestionIndex,\n                questionCount: getData().basequestions.length,\n                //Get local storage alreadyPlayedBasequestions, otherwise set empty array\n                alreadyPlayedBasequestions: localStorage.getItem('alreadyPlayedBaseQuestions') === null || localStorage.getItem('alreadyPlayedBaseQuestions') === \"undefined\" ? [] : JSON.parse(localStorage.getItem('alreadyPlayedBaseQuestions')),\n                tempAlreadyPlayedQuestions: [],\n                questionHistory: [],\n                currentQuestionLevel: 0,\n                gameView: \"start\",\n                rarityHistory: localStorage.getItem('rarityHistory') === null || localStorage.getItem('rarityHistory') === \"undefined\" ? [] : JSON.parse(localStorage.getItem('rarityHistory')),\n                // rarityHistory: [\n                //     {\"rarity\": 0.1, \"question\": \"Sample test that is like really really long, longer than Mount Everest\", \"choice\": \"Germany\"},\n                //     {\"rarity\": 10, \"question\": \"Sample test 2\", \"choice\": \"Yes\"},\n                //     {\"rarity\": 0.7, \"question\": \"Sample test 3\", \"choice\": \"No\"},\n                //     {\"rarity\": 0.7, \"question\": \"Sample test 3\", \"choice\": \"No\"},\n                //     {\"rarity\": 0.7, \"question\": \"Sample test 3\", \"choice\": \"No\"},\n                //     {\"rarity\": 0.7, \"question\": \"Sample test 3\", \"choice\": \"No\"},\n                //     {\"rarity\": 0.7, \"question\": \"Sample test 3\", \"choice\": \"No\"},\n                //     {\"rarity\": 0.7, \"question\": \"Sample test 3\", \"choice\": \"No\"},\n                //     {\"rarity\": 0.7, \"question\": \"Sample test 3\", \"choice\": \"No\"},\n                //     {\"rarity\": 0.7, \"question\": \"Sample test 3\", \"choice\": \"No\"},\n                //     {\"rarity\": 0.7, \"question\": \"Sample test 3\", \"choice\": \"No\"},\n                // ]\n            }\n        }\n        console.log(this.state.alreadyPlayedBasequestions);\n    }\n\n    //The odds for the \"odds\"-view\n    odds;\n    //The bool if it should continue on same level\n    shouldContinueInLevel = false;\n\n    handleSubmit(inputValue) {\n        console.log(inputValue);\n        //These two are the same (structure), just set the questionData to the next \"level\" and then the game can just continue\n        // console.log(getData().basequestions);\n        // console.log(getData().basequestions[0].options[0].questions);\n        // End of same\n\n        ////There are three possibilities what level comes next: \n                //1. Type final: Show odds or next question\n                //2. Type yesOrNo: Show next question with unclear type\n                //3. Type options: Show the next question OR odds\n        \n        // switch (this.getQuestionType(this.state.questionData[this.state.currentQuestion])) {\n            // ////1. Type final\n            // case \"final\":\n            if (inputValue === true && this.state.questionData[this.state.currentQuestion].yesOdds) {\n                //If chose yes and there are yesOdds -> show Odds\n                alert(\"yesOdds\");\n                var yesOdds = this.state.questionData[this.state.currentQuestion].yesOdds;\n                this.showOdds(yesOdds, \"Yes\");\n            } else if (inputValue === true && this.state.questionData[this.state.currentQuestion].yes) {\n                //If chose yes and there is yes-parameter -> show yes-Questions\n                var newYesQuestions = this.state.questionData[this.state.currentQuestion].yes.questions;\n                this.goQuestionLevelDeeper(newYesQuestions);\n            } else if (inputValue === false && this.state.questionData[this.state.currentQuestion].noOdds) {\n                //If chose no and there are noOdds -> show Odds\n                var noOdds = this.state.questionData[this.state.currentQuestion].noOdds;\n                this.showOdds(noOdds, \"No\");\n            } else if (inputValue === false && this.state.questionData[this.state.currentQuestion].no) {\n                //If chose no and there is no-parameter -> show no-Questions\n                var newNoQuestions = this.state.questionData[this.state.currentQuestion].no.questions;\n                this.goQuestionLevelDeeper(newNoQuestions);\n            } else if(typeof inputValue === \"number\") {\n                //If inputValue is a number, we have an options-type questions\n                //So there are 2 possibilities:\n                    //1. There are more questions\n                    //2. There are yes or no Odds (Also means there might still be other questions)\n\n                //1. There are more questions:\n                if (this.state.questionData[this.state.currentQuestion].options[inputValue].questions) {\n                    //We go one level deeper and set new questionData etc.\n                    var questions = this.state.questionData[this.state.currentQuestion].options[inputValue].questions;\n                    this.goQuestionLevelDeeper(questions);\n                }\n                //2. There are odds: (If still questions remaining show them after showing odds)\n                else if (this.state.questionData[this.state.currentQuestion].options[inputValue].odds) {\n                    var odds = this.state.questionData[this.state.currentQuestion].options[inputValue].odds;\n                    var choice = this.state.questionData[this.state.currentQuestion].options[inputValue].option;\n                    this.showOdds(odds, choice);\n                }\n            } else if (inputValue === \"unselected\") {\n                //If inputValue === \"unselected\", then user hasn't selected anything in select-field\n                alert(\"Trying to trick us? We noticed that you didn't select an option, so go do that before I can let you pass!\"); \n            } else {\n                alert(\"next question\");\n                //In all other cases, just set the next question\n                this.setNextQuestion();\n            }\n\n            // else if (inputValue === false && this.state.questionData[this.state.currentQuestion].yesOdds) {\n            //     //If chose no and there are yesOdds -> next question\n            //     this.setNextQuestion();\n            // } else if (inputValue === true && this.state.questionData[this.state.currentQuestion].noOdds) {\n            //     //If chose yes and there are noOdds -> next question\n            //     this.setNextQuestion();\n            // }\n            //     break;\n            ////2. Type yesOrNo\n            // case \"yesOrNo\":\n                // if(inputValue === true && this.state.questionData[this.state.currentQuestion].yes) {\n                //     var newQuestions = this.state.questionData[this.state.currentQuestion].yes.questions;\n                //     this.goQuestionLevelDeeper(newQuestions);\n                //     // this.setState({\n                //     //     questionData: newQuestions,\n                //     //     questionCount: newQuestions.length,\n                //     //     currentQuestion: randomNumberExcluding(0, newQuestions.length, []),\n                //     //     tempAlreadyPlayedQuestions: [this.currentQuestion],\n                //     // });\n                // } else if (inputValue === false && this.state.questionData[this.state.currentQuestion].no) {\n                //     if (this.state.questionData[this.state.currentQuestion].no.odds) {\n                //         //If there are odds for choosing no\n\n                //     }\n                //     var newQuestions = this.state.questionData[this.state.currentQuestion].no.questions;\n                //     this.goQuestionLevelDeeper(newQuestions);\n                //     // this.setState({\n                //     //     questionData: newQuestions,\n                //     //     questionCount: newQuestions.length,\n                //     //     currentQuestion: randomNumberExcluding(0, newQuestions.length, []),\n                //     //     tempAlreadyPlayedQuestions: [this.currentQuestion],\n                //     // });\n                // } else {\n                //     this.setNextQuestion();\n                // }\n                // break;\n            ///3. Type choice\n            // case \"choice\":\n                //inputValue needs to pass in index of chosen option, otherwise error\n                //if(typeof inputValue === \"number\") {\n                    //If inputValue is a number, we have an options-type questions\n                    //So there are 2 possibilities:\n                        //1. There are more questions\n                        //2. There are yes or no Odds (Also means there might still be other questions)\n\n                    //1. There are more questions:\n                    //if (this.state.questionData[this.state.currentQuestion].options[inputValue].questions) {\n                        //We go one level deeper and set new questionData etc.\n                        //var questions = this.state.questionData[this.state.currentQuestion].options[inputValue].questions;\n                        //this.goQuestionLevelDeeper(questions);\n                        // var newQuestionIndex = randomNumberExcluding(0, questions.length, []);\n                        // this.setState({\n                        //     questionData: questions,\n                        //     questionCount: questions.length,\n                        //     //Get random current question and reset tempAlreadyPlayedQuestions with only currentQuestions\n                        //     currentQuestion: newQuestionIndex,\n                        //     //Include new currentQuestion in the reset tempAlreadyPlayedQuestions-Array\n                        //     tempAlreadyPlayedQuestions: [newQuestionIndex],\n                        // });\n                    //}\n                    //2. There are odds: (If still questions remaining show them after showing odds)\n                //     else if (this.state.questionData[this.state.currentQuestion].options[inputValue].odds) {\n                //         var odds = this.state.questionData[this.state.currentQuestion].options[inputValue].odds;\n                //         this.showOdds(odds);\n                //     } else {\n                //         alert(\"Something went wrong\");\n                //     }\n                // } else {\n                //     alert(\"Something went wrong\");\n                // }\n                // break;\n            // default:\n            //     alert(\"Something went wrong\");\n        //}\n\n\n        // if (inputValue === true || inputValue === false) {\n    \n        // } \n        // ////2. Type yesOrNo\n        // else if (typeof inputValue === \"boolean\" && this.state.questionData[this.state.currentQuestion].yes) {\n        //     //If is a yesOrNoQuestion that goes further down a \"level\"\n        //     alert(\"hello there\");\n        // }\n\n        // ////3. Type options\n        // else if (typeof inputValue === \"number\") {\n            \n        // }\n\n\n        // var newQuestions = this.state.questionData[0].options[0].questions;\n        // this.setState({\n        //     questionData: newQuestions,\n        //     questionCount: questions.length,\n        // });\n    }\n\n    getQuestionType(question) {\n    //   if (question.options) {\n    //       alert(\"hiya\");\n    //       return \"choice\";\n    //   } else if (question.yesOdds) {\n    //       alert(\"hiya2\");\n    //     return \"yesOrNo\";\n    //   }\n  \n      if (question.options) {\n          return \"choice\";\n      } else if (question.yes || question.no) {\n          return \"yesOrNo\";\n      } else if (question.yesOdds || question.noOdds || question.odds) {\n          return \"final\";\n      } else {\n          return null;\n      }\n  \n  }\n\n  goQuestionLevelDeeper(questions) {\n      alert(\"going deeper\");\n    var newQuestionIndex = randomNumberExcluding(0, questions.length, []);\n    this.setState({\n        questionData: questions,\n        questionCount: questions.length,\n        //Get random current question and reset tempAlreadyPlayedQuestions with only currentQuestions\n        currentQuestion: newQuestionIndex,\n        //Append the current questions to the questionHistory array, along with the already played questions-Array\n        questionHistory: this.state.questionHistory.concat(\n            [{\n                \"questions\": questions,\n                \"alreadyPlayedQuestions\": [newQuestionIndex],\n            },]\n        ),\n    });\n  }\n\n  setNextQuestion(question) {\n    var levelFromBehind = 1; //Indicated how many levels up you should go \n    //(from behind because you subtract it from the last index), see below\n    var currentLevelData = this.state.questionHistory[this.state.questionHistory.length - levelFromBehind]; //The data (=questions+alreadyPlayedQuestions) for the current level\n    var isAtBaseLevel = true; //Default is true, can be set false below\n\n    if(currentLevelData && currentLevelData.alreadyPlayedQuestions.length < currentLevelData.questions.length) {\n        //If there are still questions at this level, use them\n        isAtBaseLevel = false;\n    } else {\n        //Otherwise, loop through all levels or fallback to base questions\n        //console.log(currentLevelData.alreadyPlayedQuestions.length >= currentLevelData.questions.length);\n        while (currentLevelData && levelFromBehind <= this.state.questionHistory.length && currentLevelData.alreadyPlayedQuestions.length >= currentLevelData.questions.length) {\n            //While there are no questions at this level, go up one level\n                        \n            console.log(this.state.questionHistory[this.state.questionHistory.length - levelFromBehind]);\n            console.log(\"levelFromBehind: \" + levelFromBehind);\n            console.log(\"questionHistory length: \" + this.state.questionHistory.length);\n\n            //As long as there are no questions at this level (i.e. more alreadyPlayed than there are questions), go up one level\n            //Also checks if it's already at last level\n            console.log(\"while\");\n    \n            //Set base level to false for now, might be changed in if-statement below\n            isAtBaseLevel = false;\n            //So move one level up\n            levelFromBehind += 1;\n    \n            if(levelFromBehind > this.state.questionHistory.length) {\n                alert(\"is at base\");\n                //If we went trough all levels, fallback to base level and break while-loop:\n                isAtBaseLevel = true;\n                break;\n            }\n\n            //Update the currentLevelData: (only if not already on base level)\n            currentLevelData = this.state.questionHistory[this.state.questionHistory.length - levelFromBehind];\n        }\n    }\n\n    //If we are not at base level, then get a new random question\n    if (!isAtBaseLevel) {\n        //Get new random questionIndex\n        var newRandomQuestionIndex = randomNumberExcluding(0, currentLevelData.questions.length, currentLevelData.alreadyPlayedQuestions);\n        //Update the questionHistory-Array with new alreadyPlayedQuestions\n        var newQuestionHistory = this.state.questionHistory;\n        newQuestionHistory[this.state.questionHistory.length - levelFromBehind].alreadyPlayedQuestions.push(newRandomQuestionIndex);\n        this.setState({\n            currentQuestion: newRandomQuestionIndex,\n            questionData: currentLevelData.questions,\n            //Set the questions history to current level, forget all levels below\n            //(can't be played anyways because those questions are on alreadyPlayedQuestionsList-Array)\n            questionHistory: newQuestionHistory,\n            gameView: \"game\",\n        });\n    } else if(isAtBaseLevel) {\n        //Add the current question to alreadyPlayedBaseQuestions\n        var currentBaseQuestion = this.state.currentBaseQuestion;\n        console.log(currentBaseQuestion);\n        var newAlreadyPlayedBasequestions = this.state.alreadyPlayedBasequestions ? this.state.alreadyPlayedBasequestions.concat([currentBaseQuestion]) : [currentBaseQuestion];\n        console.log(newAlreadyPlayedBasequestions);\n        this.setState({\n            //Append the current question to the already played array -> So only questions that were answered get appended\n            alreadyPlayedBasequestions: newAlreadyPlayedBasequestions,\n        }, () => {\n            alert(\"Setting base level question in local storage\");\n            localStorage.setItem('alreadyPlayedBaseQuestions', JSON.stringify(this.state.alreadyPlayedBasequestions));\n            console.log(this.state.alreadyPlayedBasequestions);\n        });\n\n        //Add +1 to alreadyPlayedBasequestions because you only append current question in the setState below\n        if (getData().basequestions.length > this.state.alreadyPlayedBasequestions.length + 1) {\n            //If there are still basequestions left, move on to the next one\n            \n            //Add current base question to alreadyPlayedBaseQuestions\n            var newQuestionIndex = randomNumberExcluding(0, getData().basequestions.length, newAlreadyPlayedBasequestions);\n            this.setState({\n                questionData: getData().basequestions,\n                currentQuestion: newQuestionIndex,\n                currentBaseQuestion: newQuestionIndex,\n                questionCount: getData().basequestions.length,\n                //Reset the questionHistory\n                questionHistory: [],\n                gameView: \"game\",\n            });\n        } else {\n            this.setState({\n                gameView: \"all-questions-played\",\n            });\n        }\n    }\n    // console.log(this.state.questionHistory[this.state.questionHistory.length - 1].alreadyPlayedQuestions);\n    // if (this.state.currentQuestion + 1 < this.state.questionCount) {\n    //     //If there are still other questions at this \"level\", then first pick one of them\n    //     var newQuestionIndex = randomNumberExcluding(0, this.state.questionCount, this.state.tempAlreadyPlayedQuestions);\n    //     this.setState({\n    //         currentQuestion: newQuestionIndex,\n    //         tempAlreadyPlayedQuestions: this.state.tempAlreadyPlayedQuestions.concat([newQuestionIndex]),\n    //     });\n    // } else if (getData().basequestions.length > this.state.alreadyPlayedBasequestions.length) {\n    //     //If there are still basequestions left, move on to the next one\n    //     var newQuestionIndex = randomNumberExcluding(0, getData().basequestions.length, this.state.alreadyPlayedBasequestions);\n    //     this.setState({\n    //         questionData: getData().basequestions,\n    //         currentQuestion: newQuestionIndex,\n    //         questionCount: getData().basequestions.length,\n    //         //Append the new question to the already played array\n    //         alreadyPlayedBasequestions: this.state.alreadyPlayedBasequestions.concat([newQuestionIndex]),\n    //         //Reset the temporary already played questions array\n    //         tempAlreadyPlayedQuestions: [],\n    //         gameView: \"game\",\n    //     });\n    // } \n  }\n\n    playAgain() {\n        this.setNextQuestion();\n    }\n\n    goBack() {\n        // if (this.state.alreadyPlayedBasequestions.length <= 1) {\n        //     //If user hasn't played at least 2 questions, he can't go back\n        //     alert(\"Play at least two questions to be able to go back!\");\n        //     return;\n        // }\n\n        if (this.state.questionHistory.length <= 1) {\n            //If we are at base level or we were on the last question, get the question from the base questions\n            var lastBaseQuestionIndex = this.state.alreadyPlayedBasequestions[this.state.alreadyPlayedBasequestions.length - 1];\n            console.log(this.state.alreadyPlayedBasequestions);\n            var lastQuestions = this.state.alreadyPlayedBasequestions.pop();\n\n\n            this.setState({\n                questionData: getData().basequestions,\n                currentQuestion: lastBaseQuestionIndex,\n                questionHistory: [],\n                alreadyPlayedBasequestions: lastQuestions,\n                gameView: \"game\",\n            });\n        } else {\n            //Otherwise get the questions from the questionHistory\n            console.log(this.state.questionHistory);\n            if (this.state.questionHistory[this.state.questionHistory.length - 1].alreadyPlayedQuestions.length > 1) {\n                //If more than one question played at this level, first go back to that question\n                //var lastQuestions = this.state.questionHistory[this.state.questionHistory.length - 1].questions;\n                //var lastQuestionIndex = this.state.questionHistory[this.state.questionHistory.length - 1].alreadyPlayedQuestions[this.state.questionHistory[this.state.questionHistory.length - 1].alreadyPlayedQuestions.length - 2];\n\n                //var lastQuestionHistory = this.state.questionHistory;\n                //lastQuestionHistory[this.state.questionHistory.length - 1].alreadyPlayedQuestions.pop();\n            } else {\n                //Otherwise go up one level\n                var lastQuestions2 = this.state.questionHistory[this.state.questionHistory.length - 2].questions;\n                var lastQuestionIndex = this.state.questionHistory[this.state.questionHistory.length - 2].alreadyPlayedQuestions[this.state.questionHistory[this.state.questionHistory.length - 2].alreadyPlayedQuestions.length - 1];\n\n                var lastQuestionHistory = this.state.questionHistory;\n                lastQuestionHistory[this.state.questionHistory.length - 2].alreadyPlayedQuestions.pop();\n            }\n\n            this.setState({\n                questionData: lastQuestions2,\n                currentQuestion: lastQuestionIndex,\n                questionHistory: lastQuestionHistory,\n                gameView: \"game\",\n            });\n        }\n    }\n\n    showOdds(rarity, choice) {\n        console.log(rarity);\n        this.odds = rarity;\n\n        //saving odds in rarity list\n        var rarityList = this.state.rarityHistory;\n        rarityList.push(\n            {\"rarity\": rarity, \"question\": this.state.questionData[this.state.currentQuestion].question, \"choice\": choice},\n            );\n        rarityList.sort(function(a,b) {\n            return a.rarity - b.rarity;\n        });\n        this.setState({\n            //Setting odds game-view\n            gameView: \"odds\",\n            rarityHistory: rarityList,\n        }, () => {\n            //Save it in local storage\n            localStorage.setItem(\"rarityHistory\", JSON.stringify(this.state.rarityHistory));\n        });\n    }\n\n    restartGame() {\n        console.log(\"RESTARTED HERE!!!\");\n        var nextQuestionIndex = randomNumberExcluding(0, getData().basequestions.length, []);\n        this.setState({\n                questionData: getData().basequestions,\n                //Get random question Index, excluding nothing at first\n                currentQuestion: nextQuestionIndex,\n                currentBaseQuestion: nextQuestionIndex,\n                questionCount: getData().basequestions.length,\n                //reset already Played Basequestions:\n                alreadyPlayedBasequestions: [],\n                questionHistory: [],\n                gameView: \"start\",\n                rarityHistory: [],\n        }, () => {\n            localStorage.setItem('alreadyPlayedBaseQuestions', JSON.stringify(this.state.alreadyPlayedBasequestions));\n            localStorage.setItem('rarityHistory', JSON.stringify(this.state.rarityHistory));\n        });\n    }\n\n  setGameView(gameView, odds) {\n    switch(gameView) {\n        case \"start\":\n            this.setState({\n                gameView: \"start\",\n            });\n            break;\n        case \"game\":\n            this.setState({\n                gameView: \"game\",\n            });\n            break;\n        case \"odds\":\n            console.log(\"yesOdds called\");\n            this.setState({\n                gameView: \"odds\",\n            });\n            this.odds = odds;\n            break;\n        default:\n            this.setState({\n                gameView: \"start\",\n            });\n            break;\n    }\n  }\n\n    render() {\n        var gameViewComponent;\n\n        console.log(this.state.gameView);\n\n        switch(this.state.gameView) {\n            case \"start\":\n                gameViewComponent = <QuestionField \n                questionText={this.state.questionData[this.state.currentQuestion].question} \n                questionType={this.getQuestionType(this.state.questionData[this.state.currentQuestion])} \n                questionOptions={this.state.questionData[this.state.currentQuestion].options}\n                onSubmit={(inputValue) => this.handleSubmit(inputValue)}\n                />;\n                break;\n            case \"game\":\n                gameViewComponent = <QuestionField \n                questionText={this.state.questionData[this.state.currentQuestion].question} \n                questionType={this.getQuestionType(this.state.questionData[this.state.currentQuestion])} \n                questionOptions={this.state.questionData[this.state.currentQuestion].options}\n                onSubmit={(inputValue) => this.handleSubmit(inputValue)}\n                />;\n                break;\n            case \"odds\":\n                gameViewComponent = <OddsView odds={this.odds} source={this.state.questionData[this.state.currentQuestion].source} onClick={() => this.playAgain()}/>;\n                break;\n            case \"all-questions-played\":\n                gameViewComponent = <AllQuestionsPlayed allQuestionsCount={getData().basequestions.length} \n                onClick={() => this.restartGame()}/>\n                break;\n            default:\n                gameViewComponent = <QuestionField \n                    questionText={this.state.questionData[this.state.currentQuestion].question} \n                    questionType={this.getQuestionType(this.state.questionData[this.state.currentQuestion])} \n                    questionOptions={this.state.questionData[this.state.currentQuestion].options}\n                    onSubmit={(inputValue) => this.handleSubmit(inputValue)}\n                />;\n                break;\n        }\n\n        return (\n            <div>\n                <div className=\"column-container\">\n\n                    <div style={{height:\"100%\"}}>\n                        <RarePercentageList data={this.state.rarityHistory}/>\n                    </div>\n\n\n                    <div className=\"game\">\n                        <div className=\"game-view\">\n                            {gameViewComponent}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n\n  function getData() {\n      var data = require('./assets/questions.json');\n      return data;\n  }\n\n  function randomNumberExcluding(min, max, excludedNumbers) {\n      //If there are more excluded numbers than the range, exit function\n    if (max-min <= excludedNumbers.length) {\n        alert(\"more excluded numbers than the range\");\n        return;\n    }\n      var number = Math.floor(Math.random() * (max-min) + min);\n      //If number was already used, generate new random number\n      while (excludedNumbers.includes(number)) {\n        number = Math.floor(Math.random() * (max-min) + min);\n      }\n      return number;\n  }"],"sourceRoot":""}